---
title: "Resetting Index in DataFrame"
date: "07/02/2023"
categories: [ pandas ]
---

## Understanding the DataFrame Index

Before tackling index resetting, let's clarify what a DataFrame index is.  The index is a unique identifier for each row in the DataFrame.  By default, Pandas assigns a numerical index starting from 0. However, you can also set a custom index using one of your DataFrame's columns, or even create a hierarchical index (MultiIndex).

```python
import pandas as pd

data = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}
df = pd.DataFrame(data)
print("Default Index:\n", df)

df = pd.DataFrame(data, index=['A', 'B', 'C'])
print("\nCustom Index:\n", df)
```


## Resetting the Index: `reset_index()`

The `reset_index()` method is your primary tool for altering the DataFrame's index.  By default, it moves the existing index into a new column named 'index', and assigns a new default numerical index.

```python
import pandas as pd

data = {'col1': [1, 2, 3], 'col2': [4, 5, 6], 'col3': [7,8,9]}
df = pd.DataFrame(data, index=['A', 'B', 'C'])
print("Original DataFrame:\n", df)

df_reset = df.reset_index()
print("\nDataFrame after reset_index():\n", df_reset)
```

Notice how the original index ('A', 'B', 'C') is now a column named 'index'.


## Controlling the Reset:  `drop` and `inplace` parameters

The `reset_index()` method offers two key parameters to fine-tune its behavior:

* **`drop=True`**: This removes the existing index completely, avoiding the creation of a new 'index' column.

* **`inplace=True`**: This modifies the DataFrame directly, rather than returning a new DataFrame.  Using `inplace=True` is generally more memory-efficient for large DataFrames.

```python
import pandas as pd

data = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}
df = pd.DataFrame(data, index=['A', 'B', 'C'])

df_drop = df.reset_index(drop=True)
print("Index dropped:\n", df_drop)

df.reset_index(inplace=True)
print("\nDataFrame modified in place:\n", df)
```


## Resetting with MultiIndex

Resetting the index also works seamlessly with hierarchical (MultiIndex) DataFrames.

```python
import pandas as pd

arrays = [['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'],
          ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]
tuples = list(zip(*arrays))
index = pd.MultiIndex.from_tuples(tuples, names=['first', 'second'])
df = pd.DataFrame(data, index=index)
print("Original MultiIndex DataFrame:\n",df)

df_reset = df.reset_index()
print("\nDataFrame after reset_index():\n",df_reset)

```

This demonstrates how `reset_index()` handles the MultiIndex, flattening it into regular columns.


## Setting a New Index During the Reset

You can also specify a new index column during the reset process.

```python
import pandas as pd
data = {'col1': [1, 2, 3], 'col2': [4, 5, 6], 'new_index':[10,20,30]}
df = pd.DataFrame(data)
df = df.set_index('new_index')
df = df.reset_index()
print(df)

```

This example shows how to use a column as a new index while resetting the index.  This is particularly useful when you want to rearrange your DataFrame based on a specific column's values.

