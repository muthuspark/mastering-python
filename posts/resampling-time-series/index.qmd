---
title: "Resampling Time Series"
date: "04/02/2024"
categories: [ pandas ]
---


Time series data, characterized by observations taken at specific points in time, is ubiquitous across various fields, from finance and economics to environmental science and healthcare.  Effectively analyzing this data often necessitates resampling â€“ the process of changing the frequency of your time series data.  This blog post dives into the art of resampling time series data using Python, focusing on the power and flexibility offered by the `pandas` library.

## Understanding Resampling Needs

Before diving into the code, let's clarify why resampling is crucial:

* **Data Aggregation:** You might have high-frequency data (e.g., minute-by-minute stock prices) and need to aggregate it to a lower frequency (e.g., daily average prices) for easier analysis or visualization.
* **Data Upsampling:** Conversely, you may possess low-frequency data (e.g., yearly rainfall) and require a higher frequency (e.g., monthly rainfall) for specific modelling techniques. This often involves interpolation.
* **Data Alignment:**  When combining multiple time series with different frequencies, resampling is crucial to align them for accurate comparison and analysis.

## The Pandas `resample()` Method: Your Swiss Army Knife

The `pandas` library provides the `resample()` method, a powerful tool for handling various resampling tasks. It operates on `pandas` `DateTimeIndex` objects, making it seamlessly integrated with time series data.


## Common Resampling Operations with Code Examples

Let's illustrate common resampling techniques with practical examples:

First, we'll create a sample time series:


```python
import pandas as pd
import numpy as np

index = pd.date_range('1/1/2024', periods=100, freq='min')
data = np.random.randn(100)
ts = pd.Series(data, index=index)
print(ts.head())
```

**1. Downsampling (Aggregation):**

Let's downsample our minute-level data to hourly data using the mean:

```python
hourly_data = ts.resample('H').mean()
print(hourly_data.head())
```

Other aggregation functions like `sum()`, `max()`, `min()`, etc., can be used instead of `mean()`.

**2. Upsampling (Interpolation):**

Now, let's upsample our hourly data to minute-level data using linear interpolation:


```python
upsampled_data = hourly_data.resample('min').interpolate(method='linear')
print(upsampled_data.head())

```

Other interpolation methods like `'cubic'`, `'polynomial'`, etc., are available depending on your needs.  Be mindful that upsampling introduces potential inaccuracies, so choosing the appropriate method is crucial.



**3. Handling Irregular Time Series:**

The `resample()` method also handles time series with irregular intervals.  Let's simulate one:

```python
irregular_index = pd.to_datetime(['2024-01-01 10:00:00', '2024-01-01 10:15:00', '2024-01-01 10:45:00', '2024-01-01 11:00:00'])
irregular_ts = pd.Series([10, 12, 15, 18], index=irregular_index)
print(irregular_ts)

#Resample to 15 minute intervals, filling missing values with forward fill
resampled_irregular = irregular_ts.resample('15min').ffill()
print(resampled_irregular)
```
Notice how `ffill()` (forward fill) handles missing data generated by upsampling.  Other options include `bfill()` (backward fill), or specific values.


## Advanced Resampling Techniques

The `resample()` method offers further customization, allowing you to handle edge cases and fine-tune the resampling process, including handling of the beginning and end of the time series through `closed`, `label` parameters.  Explore the `pandas` documentation for a comprehensive understanding.  Experimenting with different aggregation and interpolation methods is key to mastering time series resampling.

