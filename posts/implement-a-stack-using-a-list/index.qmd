---
title: "Implement a Stack Using a List"
date: "03/18/2024"
categories: [ problem-solving ]
---

Stacks are fundamental data structures following the Last-In, First-Out (LIFO) principle.  Think of a stack of plates â€“ you can only add a new plate to the top and remove the topmost plate.  Python doesn't have a built-in stack data type, but we can easily implement one using a list. This approach leverages Python's list capabilities for efficient stack operations.

## Understanding Stack Operations

Before diving into the code, let's review the core stack operations:

* **Push:** Adds an element to the top of the stack.
* **Pop:** Removes and returns the element from the top of the stack.  Raises an exception if the stack is empty.
* **Peek (or Top):** Returns the element at the top of the stack without removing it. Raises an exception if the stack is empty.
* **IsEmpty:** Checks if the stack is empty.


## Implementing the Stack

We'll use a Python list to represent the stack.  The `append()` method will serve as our `push` operation, and `pop()` will handle `pop`. We'll add methods for `peek` and `isEmpty` for completeness.

```python
class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        else:
            raise IndexError("Cannot pop from an empty stack")

    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        else:
            raise IndexError("Cannot peek into an empty stack")

    def is_empty(self):
        return len(self.items) == 0

    def size(self):
        return len(self.items)

```

## Using the Stack

Here's how you can use the `Stack` class:


```python
stack = Stack()
stack.push(1)
stack.push(2)
stack.push(3)

print(f"Stack size: {stack.size()}")  # Output: Stack size: 3
print(f"Top element: {stack.peek()}")  # Output: Top element: 3
print(f"Popped element: {stack.pop()}")  # Output: Popped element: 3
print(f"Stack size after pop: {stack.size()}") # Output: Stack size after pop: 2

print(stack.is_empty()) # Output: False

#Example of exception handling

try:
    print(stack.pop())
    print(stack.pop())
    print(stack.pop())
    print(stack.pop()) #This will cause an IndexError
except IndexError as e:
    print(f"Error: {e}") #Output: Error: Cannot pop from an empty stack

```

This example demonstrates the basic stack operations.  The `try-except` block showcases how to handle potential `IndexError` exceptions that can occur when attempting to `pop` or `peek` from an empty stack, a crucial aspect of robust code.  Remember to always handle edge cases like empty stacks to prevent unexpected errors in your applications.


##  Advantages of using Lists for Stack Implementation

Using Python lists offers several advantages:

* **Simplicity:**  The implementation is straightforward and easy to understand.
* **Efficiency:**  List's `append()` and `pop()` methods are highly optimized, providing good performance.
* **Readily Available:** Lists are a built-in data structure, requiring no additional libraries.


This simple implementation provides a functional stack using readily available Python features.  Remember to adapt and extend this code to meet the specific needs of your applications.