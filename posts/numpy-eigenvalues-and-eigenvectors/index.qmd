---
title: "NumPy Eigenvalues and Eigenvectors"
date: "08/05/2023"
categories: [ numpy ]
---

## What are Eigenvalues and Eigenvectors?

Before diving into the code, let's briefly revisit the mathematical concepts.  Given a square matrix *A*, an eigenvector *v* is a non-zero vector that, when multiplied by *A*, only changes its scale; it doesn't change its direction.  The scaling factor is the eigenvalue *λ*.  Mathematically, this relationship is expressed as:

`Av = λv`

Finding eigenvalues and eigenvectors allows us to understand the underlying structure and transformations represented by a matrix.  For instance, the eigenvectors represent the principal axes of transformation, and the eigenvalues quantify the scaling along those axes.


## Calculating Eigenvalues and Eigenvectors with NumPy's `linalg.eig()`

NumPy's `linalg` module offers the `eig()` function to efficiently compute both eigenvalues and eigenvectors. Let's see it in action:

```python
import numpy as np

A = np.array([[1, 2],
              [3, 4]])

eigenvalues, eigenvectors = np.linalg.eig(A)

print("Eigenvalues:", eigenvalues)
print("Eigenvectors:\n", eigenvectors)
```

This code first defines a 2x2 matrix.  `np.linalg.eig(A)` then returns two arrays: `eigenvalues` containing the eigenvalues and `eigenvectors` where each column represents an eigenvector corresponding to the eigenvalue at the same index in the `eigenvalues` array.


## Understanding the Output

The output will show you the calculated eigenvalues and eigenvectors.  Note that the eigenvectors are not unique; they can be scaled by any non-zero constant and still remain valid eigenvectors.

Let's verify the eigenvector-eigenvalue relationship for the first eigenvector and eigenvalue:

```python
v = eigenvectors[:, 0]  # First eigenvector
λ = eigenvalues[0]       # Corresponding eigenvalue

print("Verification:")
print(np.dot(A, v))     # Matrix-vector multiplication
print(λ * v)           # Scalar multiplication of the eigenvector
```

The output of `np.dot(A, v)` and `λ * v` should be very close (numerical precision might introduce minor differences). This confirms the eigenvector-eigenvalue relationship.


##  Working with Larger Matrices

The `linalg.eig()` function seamlessly handles larger matrices:

```python
B = np.array([[2, -1, 0],
              [-1, 2, -1],
              [0, -1, 2]])

eigenvalues_B, eigenvectors_B = np.linalg.eig(B)

print("\nEigenvalues of B:", eigenvalues_B)
print("Eigenvectors of B:\n", eigenvectors_B)
```

This demonstrates the versatility of `np.linalg.eig()` for matrices of any size (as long as they are square).


## Handling Complex Eigenvalues

Some matrices have complex eigenvalues and eigenvectors. NumPy's `eig()` function handles these gracefully:

```python
C = np.array([[0, 1],
              [-1, 0]])

eigenvalues_C, eigenvectors_C = np.linalg.eig(C)

print("\nEigenvalues of C:", eigenvalues_C)
print("Eigenvectors of C:\n", eigenvectors_C)
```

Notice that the eigenvalues and eigenvectors might contain complex numbers, represented with `j` for the imaginary unit.


##  Beyond the Basics:  Further Exploration


This exploration provides a foundation for utilizing eigenvalues and eigenvectors in your Python projects.  Further exploration could involve examining applications in specific fields, delving into more advanced linear algebra concepts, and investigating alternative methods for eigenvalue computation when dealing with very large or special types of matrices.

