---
title: "Method Resolution Order (MRO)"
date: "10/20/2024"
categories: [ advanced ]
---


Python's elegant inheritance model relies heavily on its sophisticated Method Resolution Order (MRO).  Understanding MRO is crucial for writing clean, predictable, and bug-free object-oriented code.  This post will demystify MRO, explaining its principles and showcasing its behavior through practical examples.

## What is MRO?

When a method is called on an object, Python needs to determine which version of the method to execute, especially when dealing with multiple inheritance.  The MRO defines the order in which Python searches the class hierarchy to find the appropriate method.  This order isn't simply a linear traversal; it follows a carefully defined algorithm to avoid ambiguity and ensure consistent behavior.

Prior to Python 2.3, the search was depth-first, leading to unpredictable results in complex inheritance scenarios. Python 2.3 introduced the C3 linearization algorithm, which guarantees a consistent and predictable MRO across different inheritance structures.

## The C3 Linearization Algorithm

The C3 algorithm ensures that the MRO is:

* **Monotonic:** If class `B` is before class `C` in the MRO of `A`, then `B` will also appear before `C` in the MRO of any subclass of `A`.
* **Consistent:** All linearizations for a given class hierarchy will produce the same MRO.
* **Locally linear:** The MRO of a class is a linearization of its base classes.

While the intricacies of the C3 algorithm itself are beyond the scope of this introductory post, understanding its guarantees is key to utilizing inheritance effectively.

## Understanding MRO with Examples

Let's illustrate MRO with several code examples:

**Example 1: Simple Inheritance**

```python
class A:
    def method(self):
        print("A.method")

class B(A):
    def method(self):
        print("B.method")

b = B()
b.method()  # Output: B.method

print(B.__mro__) # Output: (<class '__main__.B'>, <class '__main__.A'>, <class 'object'>)
```

Here, `B` inherits from `A`. The MRO shows that `B`'s methods are checked first, then `A`'s, and finally `object`'s (the base class of all classes).

**Example 2: Multiple Inheritance**

```python
class A:
    def method(self):
        print("A.method")

class B:
    def method(self):
        print("B.method")

class C(A, B):
    pass

c = C()
c.method()  # Output: A.method

print(C.__mro__) # Output: (<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)
```

In multiple inheritance, the order matters.  `A` is listed before `B` in `C`'s definition, thus `A.method` is called. The MRO reflects this order of precedence.


**Example 3: More Complex Inheritance**

```python
class A:
    def method(self):
        print("A.method")

class B(A):
    pass

class C(A):
    def method(self):
        print("C.method")

class D(B, C):
    pass

d = D()
d.method()  # Output: C.method

print(D.__mro__) # Output: (<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>)
```

This example demonstrates the power of the C3 algorithm.  Even with this more complex structure, the MRO is predictable and resolves the method call to `C.method` because `C` is listed before `B` in `D`'s inheritance.  Note the order in `D.__mro__`.  It's crucial to understand how this order is determined to avoid unexpected behavior.

**Example 4: Diamond Problem**

The "diamond problem" occurs when a class inherits from two classes that share a common ancestor.  The C3 algorithm elegantly resolves this:

```python
class A:
    def method(self):
        print("A.method")

class B(A):
    pass

class C(A):
    pass

class D(B, C):
    pass

d = D()
d.method()  # Output: A.method

print(D.__mro__) # Output: (<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>)

```
In this scenario, D inherits from both B and C, which both inherit from A.  The C3 algorithm ensures that A is called only once in the MRO preventing the ambiguity and unexpected results found in other languages.


These examples highlight the importance of understanding Python's MRO.  By carefully considering the inheritance hierarchy and the resulting MRO, you can write more robust and maintainable object-oriented code.

