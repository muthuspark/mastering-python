---
title: "Sorting by Index"
date: "04/10/2023"
categories: [ pandas ]
---


Sorting data is a fundamental task in programming, and Python offers powerful tools to handle this efficiently. While Python's built-in `sort()` and `sorted()` functions are versatile, they primarily sort based on the inherent value of elements.  However, situations often arise where you need to sort a list based on the indices of another list, effectively rearranging one list according to the order specified by another. This technique is known as sorting by index.


This post explores different approaches to achieve sorting by index in Python, providing clear explanations and code examples to illustrate each method.


## Method 1: Using `zip` and `sorted`

This method leverages the power of `zip` to create pairs of index and value, enabling sorting based on the indices.  The `sorted` function with a custom `key` allows specifying the sorting criteria.

```python
data = ['apple', 'banana', 'cherry', 'date']
indices = [3, 0, 2, 1]

zipped = zip(indices, data)

sorted_data = [item for _, item in sorted(zipped)]

print(sorted_data)  # Output: ['date', 'apple', 'cherry', 'banana']
```

This code first pairs the `data` and `indices` using `zip`.  Then, `sorted` sorts these pairs based on the index (the first element of each tuple). Finally, a list comprehension extracts only the data elements from the sorted pairs.


## Method 2: Using `argsort` from NumPy

NumPy, a powerful library for numerical computing in Python, provides the `argsort` function, which returns the indices that would sort an array. This method is particularly efficient for numerical data.

```python
import numpy as np

data = np.array(['apple', 'banana', 'cherry', 'date'])
indices = np.array([3, 0, 2, 1])

sort_indices = np.argsort(indices)

sorted_data = data[sort_indices]

print(sorted_data)  # Output: ['banana', 'date', 'cherry', 'apple']
```

Here, `np.argsort(indices)` provides the indices needed to sort the `indices` array. These indices are then used to directly access and reorder the elements in the `data` array.


## Method 3:  Using a custom function with `sorted` (for more complex scenarios)


For more complex sorting criteria involving multiple indices or custom logic, a custom function can be used as the `key` for the `sorted` function.


```python
data = [('apple', 10), ('banana', 5), ('cherry', 15), ('date', 2)]
indices = [1, 0, 3, 2] # index of a tuple

def sort_by_index_tuple(item):
  return indices[data.index(item)]

sorted_data = sorted(data, key=sort_by_index_tuple)

print(sorted_data) # Output: [('banana', 5), ('apple', 10), ('date', 2), ('cherry', 15)]
```

This example demonstrates sorting tuples based on the index within the `indices` list. The `sort_by_index_tuple` function acts as a custom key for the `sorted` function, returning the relevant index for each tuple.



## Choosing the Right Method

The best method for sorting by index depends on the specific context. The `zip` and `sorted` method is generally suitable for smaller datasets and simpler scenarios. NumPy's `argsort` offers superior performance for larger numerical datasets. The custom function approach provides flexibility for complex sorting logic.  Consider the size of your data and the complexity of your sorting requirements when selecting a method.

