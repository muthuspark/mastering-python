---
title: "Python Properties"
date: "02/09/2024"
categories: [ advanced ]
---


Python properties offer a powerful and elegant way to manage access to an object's attributes.  They allow you to control how attributes are accessed, modified, and deleted, promoting cleaner, more maintainable code and enforcing data integrity.  This post will look into the intricacies of Python properties, demonstrating their usage with clear examples.


## Understanding the Need for Properties

Before diving into properties, let's consider a simple class:

```python
class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

rect = Rectangle(5, 10)
print(rect.area())  # Output: 50
```

This works fine, but what if we want to ensure the width and height are always positive?  Direct attribute access allows for invalid values:

```python
rect.width = -5  # Oops! Negative width
print(rect.area()) # Output: -50 (Incorrect)
```

Properties provide a solution by allowing us to intercept attribute access and perform validation or other actions.


## Implementing Properties with `@property`

The `@property` decorator transforms a method into a read-only property.  Let's enhance our `Rectangle` class:

```python
class Rectangle:
    def __init__(self, width, height):
        self._width = width  # Note the underscore
        self._height = height

    @property
    def width(self):
        return self._width

    @width.setter
    def width(self, value):
        if value <= 0:
            raise ValueError("Width must be positive")
        self._width = value

    @property
    def height(self):
        return self._height

    @height.setter
    def height(self, value):
        if value <= 0:
            raise ValueError("Height must be positive")
        self._height = value

    def area(self):
        return self._width * self._height

rect = Rectangle(5, 10)
print(rect.area())  # Output: 50

rect.width = 7
print(rect.area())  # Output: 70

try:
    rect.width = -2
except ValueError as e:
    print(e)  # Output: Width must be positive

```

Notice the underscore prefix (`_width`, `_height`). This is a common convention in Python to indicate that an attribute is intended for internal use and should not be accessed directly.  The `@property` decorator makes `width` and `height` appear as attributes, but their access is controlled by the getter methods.  The `@width.setter` decorator defines how the `width` attribute is set.


##  Adding a Deleter with `@property.deleter`

You can also control attribute deletion using `@property.deleter`:

```python
class Rectangle:
    # ... (previous code) ...

    @width.deleter
    def width(self):
        print("Deleting width...")
        del self._width

rect = Rectangle(5,10)
del rect.width # Output: Deleting width...
```

This demonstrates how the `@property.deleter` allows control over the deletion of the attribute.

##  Benefits of Using Properties

* **Encapsulation:**  Properties hide implementation details and provide a controlled interface to the attributes.
* **Data Validation:**  You can easily enforce data integrity by validating input before setting attribute values.
* **Computed Attributes:**  Properties can be used to calculate values on the fly, rather than storing them explicitly.
* **Readability and Maintainability:** Properties make your code cleaner and easier to understand.


## Advanced Property Usage:  Calculated Attributes

Properties are extremely useful for computing attributes on demand.  This is especially useful when the attribute's value depends on other attributes:

```python
class Circle:
    def __init__(self, radius):
        self._radius = radius

    @property
    def radius(self):
        return self._radius

    @radius.setter
    def radius(self, value):
        if value <= 0:
            raise ValueError("Radius must be positive")
        self._radius = value

    @property
    def area(self):
        return 3.14159 * self._radius * self._radius

circle = Circle(5)
print(circle.area)  # Output: 78.53975
```

Here, the `area` property calculates the circle's area whenever it is accessed, without the need to explicitly store the area as an attribute.

