---
title: "Multiple Inheritance in Python"
date: "01/29/2024"
categories: [ advanced ]
---


Multiple inheritance, a powerful yet sometimes complex feature, allows a class to inherit attributes and methods from multiple parent classes.  This contrasts with single inheritance, where a class inherits from only one parent. Python, unlike some other languages, fully supports multiple inheritance, offering both flexibility and potential pitfalls. Let's explore how it works with examples.

## The Basics of Multiple Inheritance

In Python, you specify multiple parent classes by listing them in parentheses after the class definition, separated by commas.

```python
class Parent1:
    def method1(self):
        print("Parent1 method")

class Parent2:
    def method2(self):
        print("Parent2 method")

class Child(Parent1, Parent2):  # Inherits from both Parent1 and Parent2
    def method3(self):
        print("Child method")

child_instance = Child()
child_instance.method1()  # Output: Parent1 method
child_instance.method2()  # Output: Parent2 method
child_instance.method3()  # Output: Child method
```

This simple example demonstrates the fundamental concept: the `Child` class inherits `method1` from `Parent1` and `method2` from `Parent2`. It also has its own method, `method3`.

## Method Resolution Order (MRO)

The crucial aspect of multiple inheritance is the Method Resolution Order (MRO).  This determines which parent class's method is called if there's a name conflict (i.e., both parent classes have a method with the same name). Python uses the C3 linearization algorithm to determine the MRO, ensuring a consistent and predictable order.

You can inspect the MRO using the `mro()` method or the `__mro__` attribute:


```python
print(Child.mro()) # Output: [<class '__main__.Child'>, <class '__main__.Parent1'>, <class '__main__.Parent2'>, <class 'object'>]
print(Child.__mro__) # Output: (<class '__main__.Child'>, <class '__main__.Parent1'>, <class '__main__.Parent2'>, <class 'object'>, <class 'type'>)

```

The output shows the order in which Python will search for methods:  `Child`, then `Parent1`, then `Parent2`, and finally `object` (the base class of all classes).

##  Overriding Methods

If a child class defines a method with the same name as a method in one of its parent classes, the child class's method overrides the parent class's method.


```python
class Parent1:
    def method1(self):
        print("Parent1 method")

class Parent2:
    def method1(self):
        print("Parent2 method")

class Child(Parent1, Parent2):
    pass

child_instance = Child()
child_instance.method1()  # Output: Parent1 method

```

In this case, because `Parent1` is listed before `Parent2` in the inheritance, `Parent1`'s `method1` is used.


## Diamond Problem

Multiple inheritance can lead to the "diamond problem," a classic inheritance ambiguity.  This arises when two parent classes inherit from a common ancestor, and the child class inherits from both parents.  If the ancestor and both parents have a method with the same name, which method should be called?


```python
class Grandparent:
    def method1(self):
        print("Grandparent method")

class Parent1(Grandparent):
    pass

class Parent2(Grandparent):
    pass

class Child(Parent1, Parent2):
    pass

child_instance = Child()
child_instance.method1() # Output: Grandparent method
```

Python's MRO resolves this by prioritizing the leftmost parent class.  In this case it's `Parent1` which inherits from `Grandparent`, therefore it calls `Grandparent.method1`.  Understanding MRO is critical to avoid unexpected behavior in complex inheritance scenarios.


##  Practical Applications

Multiple inheritance finds use in various situations:

* **Combining functionality:**  Inherit from classes providing different aspects of desired behavior.
* **Mixins:** Create small classes that add specific functionalities to other classes without creating a tight coupling.


Multiple inheritance is a powerful tool, but careful consideration of MRO and potential conflicts is essential for writing maintainable and predictable code.  Using it judiciously can lead to elegant and reusable class structures.

