---
title: "Implement a Quick Sort Algorithm"
date: "02/17/2024"
categories: [ problem-solving ]
---

QuickSort is a highly efficient sorting algorithm known for its speed in many practical scenarios.  This post explores its implementation in Python, explaining the core concepts and providing clear code examples to help you master this fundamental algorithm.


## Understanding the QuickSort Algorithm

QuickSort employs a divide-and-conquer strategy.  The algorithm works by selecting a 'pivot' element from the array.  It then partitions the array around this pivot, such that all elements smaller than the pivot are placed before it, and all elements greater than the pivot are placed after it.  This process is then recursively applied to the sub-arrays before and after the pivot until the entire array is sorted.


## Choosing a Pivot: Strategies and Impact

The choice of pivot influences QuickSort's performance. Poor pivot selection can lead to worst-case O(nÂ²) time complexity. Common pivot selection strategies include:

* **First element:**  Simple but susceptible to already-sorted or nearly-sorted input.
* **Last element:** Similar to the first element strategy.
* **Random element:**  A good choice for mitigating worst-case scenarios.
* **Median-of-three:** Selecting the median of the first, middle, and last elements often provides a better pivot.


## Python Implementation: A Step-by-Step Approach

Let's implement QuickSort using the last element as the pivot.  This example focuses on clarity and understanding.  Optimizations are discussed later.

```python
def quicksort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[-1]
        smaller = [i for i in arr[:-1] if i <= pivot]
        larger = [i for i in arr[:-1] if i > pivot]
        return quicksort(smaller) + [pivot] + quicksort(larger)

# Example usage
my_list = [10, 7, 8, 9, 1, 5]
sorted_list = quicksort(my_list)
print(f"Sorted list: {sorted_list}")
```

This code first checks for base cases (arrays with less than two elements).  Then, it selects the last element as the pivot, partitions the array into smaller and larger sub-arrays, and recursively calls `quicksort` on these sub-arrays.  Finally, it concatenates the sorted sub-arrays with the pivot to produce the sorted array.


##  In-Place QuickSort for Efficiency

The previous example is not in-place; it creates new arrays during partitioning.  An in-place implementation is more memory-efficient, especially for large arrays.  Here's a more advanced implementation:


```python
def quicksort_inplace(arr, low, high):
    if low < high:
        pivot_index = partition(arr, low, high)
        quicksort_inplace(arr, low, pivot_index - 1)
        quicksort_inplace(arr, pivot_index + 1, high)

def partition(arr, low, high):
    pivot = arr[high]
    i = low - 1
    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1

# Example Usage
my_list = [10, 7, 8, 9, 1, 5]
quicksort_inplace(my_list, 0, len(my_list) - 1)
print(f"Sorted list (in-place): {my_list}")
```

This version uses the `partition` function to rearrange the elements in-place, avoiding unnecessary array copies.


## Optimizations and Considerations

Further optimizations can be implemented, such as:

* **Randomized pivot selection:** Improves average-case performance.
* **Insertion sort for small sub-arrays:**  Insertion sort is faster for small arrays.
* **Three-way partitioning:** Handles duplicate elements more efficiently.


These improvements make QuickSort a powerful sorting algorithm for various applications. Understanding these implementations provides a solid foundation for tackling more complex sorting challenges.