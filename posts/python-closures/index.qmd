---
title: "Python Closures"
date: "06/12/2024"
categories: [ basic ]
---


Python closures are a powerful and often misunderstood feature. They allow inner functions to access and remember variables from their enclosing scope, even after the outer function has finished executing. This creates a persistent connection between the inner and outer function, leading to flexible and efficient code. Let's explore this concept with clear explanations and practical examples.

## What is a Closure?

A closure in Python is an inner function that has access to variables in its local scope, as well as variables in the enclosing (outer) function's scope, even after the outer function has completed its execution.  This "remembering" of variables is key to the closure's functionality.

To form a closure, three conditions must be met:

1. **A nested function:** An inner function defined within another function.
2. **The inner function refers to a variable in the outer function's scope (a free variable).**
3. **The outer function returns the inner function.**


## Example 1: A Simple Closure

This example demonstrates a basic closure that creates a counter:

```python
def counter():
    count = 0  # Free variable

    def increment():
        nonlocal count # Important! This declares that we are modifying the outer count, not creating a new one.
        count += 1
        return count

    return increment

my_counter = counter()
print(my_counter())  # Output: 1
print(my_counter())  # Output: 2
print(my_counter())  # Output: 3
```

Here, `increment` is the inner function forming the closure. It accesses and modifies `count`, a free variable from `counter()`'s scope, even after `counter()` has finished executing.  The `nonlocal` keyword is crucial; it tells Python that `count` refers to the variable in the enclosing scope, not a new local variable.

## Example 2: Closures and Partial Functions

Closures can be used to create customized functions:

```python
def make_multiplier(x):
    def multiplier(y):
        return x * y
    return multiplier

double = make_multiplier(2)
triple = make_multiplier(3)

print(double(5))  # Output: 10
print(triple(5))  # Output: 15
```

`make_multiplier` returns a new function (`multiplier`) that "remembers" the value of `x`.  This allows us to create specialized multipliers (double, triple) without writing separate functions for each.


## Example 3:  Closures and Decorators

Decorators, a powerful Python feature, rely heavily on closures:

```python
def my_decorator(func):
    def wrapper():
        print("Before function execution")
        func()
        print("After function execution")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()
```

The `wrapper` function inside `my_decorator` forms a closure, accessing and executing `func` (say_hello) while adding extra functionality before and after.


## When to Use Closures

Closures are beneficial in many scenarios:

* **State preservation:**  Maintaining state across function calls (like the counter example).
* **Partial functions:** Creating specialized versions of functions with pre-set parameters (multiplier example).
* **Decorators:** Enhancing functions with additional behavior without modifying their core logic.
* **Encapsulation:** Hiding implementation details and protecting variables.



##  Beyond the Basics

The power of closures extends beyond these basic examples.  They are a fundamental concept in higher-order functions and functional programming paradigms in Python.  Understanding closures unlocks the potential for writing cleaner, more concise, and reusable code.

