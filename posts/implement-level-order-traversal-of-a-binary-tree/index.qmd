---
title: "Implement Level-order Traversal of a Binary Tree"
date: "04/27/2024"
categories: [ problem-solving ]
---

Level-order traversal, also known as breadth-first traversal, is a fundamental algorithm for exploring tree structures.  Unlike depth-first traversals (pre-order, in-order, post-order), level-order visits nodes level by level, starting from the root and proceeding to the next level only after all nodes at the current level have been processed. This approach is incredibly useful in various applications, including finding the shortest path in a tree or visualizing tree structures.  This post will implement level-order traversal of a binary tree in Python, providing clear explanations and code examples.


## Understanding Binary Trees and Level-Order Traversal

A binary tree is a hierarchical data structure where each node has at most two children, referred to as the left child and the right child.  Level-order traversal systematically visits each node, ensuring that all nodes at a given depth are visited before moving to the next deeper level. This is achieved using a queue data structure.

## Implementing Level-Order Traversal using a Queue

The most efficient way to implement level-order traversal uses a queue.  Here's a step-by-step approach:

1. **Enqueue the root node:**  Begin by adding the root node to the queue.

2. **Dequeue and process:** While the queue is not empty:
    * Dequeue a node from the front of the queue.
    * Process the node (e.g., print its value).
    * Enqueue the node's left child (if it exists).
    * Enqueue the node's right child (if it exists).

3. **Repeat step 2:** Continue this process until the queue is empty.  This guarantees that all nodes are visited level by level.

## Python Code Example

Let's implement this algorithm in Python.  We'll define a simple `Node` class to represent nodes in the binary tree:


```python
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def levelOrder(root):
    if root is None:
        return

    nodes = [root]
    while(len(nodes) > 0):
        curr = nodes.pop(0)
        print(curr.data, end=" ")

        if curr.left is not None:
            nodes.append(curr.left)

        if curr.right is not None:
            nodes.append(curr.right)


# Example usage:
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)

print("Level Order traversal of binary tree is -")
levelOrder(root)  # Output: 1 2 3 4 5
```

This code efficiently implements level-order traversal. The `nodes` list acts as our queue, using `pop(0)` for dequeuing (FIFO).  The output clearly demonstrates the level-by-level processing.


## Handling Empty Trees and Null Children

The code includes a check for an empty tree (`if root is None`). It also handles cases where a node might have only one child or no children by conditionally enqueueing left and right children. This robustness is for handling various tree configurations.


## Using the `collections.deque` for improved efficiency

For larger trees, using the `collections.deque` object provides optimized queue operations, leading to better performance:

```python
from collections import deque

class Node:
    # ... (Node class remains the same) ...

def levelOrderDeque(root):
    if root is None:
        return

    nodes = deque([root])
    while(len(nodes) > 0):
        curr = nodes.popleft()
        print(curr.data, end=" ")

        if curr.left is not None:
            nodes.append(curr.left)

        if curr.right is not None:
            nodes.append(curr.right)

# Example usage (same as before, just replace levelOrder with levelOrderDeque)
```

This version uses the optimized queue operations of `deque`, making it a more efficient solution for larger datasets.


##  Further Enhancements and Applications

This foundational level-order traversal algorithm can be extended for various applications. For example, you could easily modify it to return a list of levels instead of printing them, enabling further processing of the tree's structure.  This forms the basis for many more complex tree algorithms.