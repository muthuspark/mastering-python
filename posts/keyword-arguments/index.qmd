---
title: "Keyword Arguments"
date: "09/18/2024"
categories: [ basic ]
---


Python's flexibility shines through its support for various argument passing mechanisms. Among these, keyword arguments stand out for their readability and power, offering a cleaner and more maintainable way to work with functions. This post dives deep into keyword arguments, explaining their usage and benefits with clear code examples.


## Understanding Keyword Arguments

Keyword arguments, also known as named arguments, are a way to pass arguments to a function by specifying the parameter name along with the value.  This contrasts with positional arguments, where the order of arguments matters.  The key benefit is improved code readability, especially when dealing with functions that have many parameters.


**Example:**

Let's define a simple function that greets a user:

```python
def greet(name, greeting="Hello"):
  print(f"{greeting}, {name}!")

greet("Alice")  # Output: Hello, Alice!
greet("Bob", greeting="Good morning")  # Output: Good morning, Bob!
```

In this example, `name` is a positional argument (required), while `greeting` is a keyword argument (optional, with a default value).  Notice how we can explicitly specify the `greeting` even though it's not the first argument.  This is the power of keyword arguments – order doesn't matter when you use the parameter names.


## Keyword Arguments with Multiple Parameters

Keyword arguments become even more valuable when working with functions that have several parameters.  Consider a function to create a user profile:

```python
def create_profile(name, age, city, country="USA"):
  profile = {
      "name": name,
      "age": age,
      "city": city,
      "country": country
  }
  return profile

profile1 = create_profile("Charlie", 30, "New York")
print(profile1) #Output: {'name': 'Charlie', 'age': 30, 'city': 'New York', 'country': 'USA'}

profile2 = create_profile(city="London", age=25, name="David", country="UK")
print(profile2) # Output: {'name': 'David', 'age': 25, 'city': 'London', 'country': 'UK'}
```

Here, we've clearly specified each parameter with its value. The order doesn't affect the outcome, making the code much easier to understand and maintain.


## Mixing Positional and Keyword Arguments

It’s perfectly acceptable to mix positional and keyword arguments in a function call. However, positional arguments must come *before* keyword arguments.

```python
def describe_pet(animal_type, pet_name, age=None):
    print(f"\nI have a {animal_type}.")
    print(f"My {animal_type}'s name is {pet_name.title()}.")
    if age:
        print(f"My {animal_type} is {age} years old.")


describe_pet('hamster', 'harry', age=2) #Correct
#describe_pet(pet_name='harry', 'hamster', age=2) #Incorrect - Positional arguments must come before keyword arguments.

```

This flexibility allows for a balance between conciseness (using positional arguments when the order is clear) and readability (using keyword arguments for clarity when dealing with many parameters or complex data).


## Keyword-Only Arguments

Python 3 also introduced keyword-only arguments. These are parameters that *must* be passed using keyword notation.  They are defined after an asterisk (`*`) in the function definition.

```python
def print_info(name, age, *, city="Unknown", country="Unknown"):
    print(f"Name: {name}, Age: {age}, City: {city}, Country: {country}")

print_info("Eve", 28, city="Paris", country="France")  #Correct
#print_info("Eve", 28, "Paris", "France") #Incorrect - city and country must be passed as keyword arguments
```

Keyword-only arguments enforce a specific way of calling the function, increasing code predictability and reducing the chances of errors due to incorrect argument order.


## Arbitrary Keyword Arguments (**kwargs)

The `**kwargs` syntax allows a function to accept an arbitrary number of keyword arguments. These are collected into a dictionary.

```python
def display_details(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

display_details(name="Frank", profession="Engineer", location="Silicon Valley")
```

This is particularly useful for functions that need to handle a variable number of optional parameters or when integrating with other code that might pass unexpected keyword arguments.

