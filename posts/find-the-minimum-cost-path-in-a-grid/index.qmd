---
title: "Find the Minimum Cost Path in a Grid"
date: "12/16/2024"
categories: [ problem-solving ]
---

Finding the minimum cost path in a grid is a classic algorithmic problem with applications in various fields, from robotics (path planning) to network optimization.  This post explores how to solve this problem efficiently in Python using dynamic programming.

## Understanding the Problem

Imagine a grid where each cell contains a cost.  The goal is to find a path from the top-left corner to the bottom-right corner that minimizes the total cost.  You can only move right or down at each step.


## The Dynamic Programming Approach

Dynamic programming is a powerful technique that solves complex problems by breaking them down into smaller, overlapping subproblems.  In this context, we can build a table (often a 2D array) to store the minimum cost to reach each cell.

Let's define:

* `cost[i][j]` : The cost associated with cell (i, j) in the grid.
* `dp[i][j]` : The minimum cost to reach cell (i, j) from the top-left corner.

We can initialize `dp[0][0]` to `cost[0][0]`. For other cells, the minimum cost is the minimum of the cost to reach the cell from the top (`dp[i-1][j]`) or from the left (`dp[i][j-1]`), plus the cost of the current cell.  This can be expressed as:

`dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])` (for i > 0 and j > 0)

For the first row and first column, we only have one direction to consider:

* `dp[i][0] = dp[i-1][0] + cost[i][0]` (for i > 0)
* `dp[0][j] = dp[0][j-1] + cost[0][j]` (for j > 0)


## Python Code Implementation

Here's a Python function that implements this dynamic programming solution:


```python
def min_cost_path(cost):
    """
    Finds the minimum cost path in a grid using dynamic programming.

    Args:
        cost: A 2D list representing the cost of each cell in the grid.

    Returns:
        The minimum cost to reach the bottom-right corner.  Returns -1 if the grid is empty or invalid.

    """
    rows = len(cost)
    cols = len(cost[0]) if rows > 0 else 0

    if rows == 0 or cols == 0:
        return -1

    dp = [[0 for _ in range(cols)] for _ in range(rows)]
    dp[0][0] = cost[0][0]

    # Initialize first row and column
    for i in range(1, rows):
        dp[i][0] = dp[i - 1][0] + cost[i][0]
    for j in range(1, cols):
        dp[0][j] = dp[0][j - 1] + cost[0][j]

    # Fill the DP table
    for i in range(1, rows):
        for j in range(1, cols):
            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])

    return dp[rows - 1][cols - 1]


# Example usage:
cost_grid = [[1, 3, 1],
             [1, 5, 1],
             [4, 2, 1]]

min_cost = min_cost_path(cost_grid)
print(f"The minimum cost path is: {min_cost}")  # Output: 6

cost_grid = [[1, 2],
             [3, 4]]
min_cost = min_cost_path(cost_grid)
print(f"The minimum cost path is: {min_cost}") # Output: 6


empty_grid = []
min_cost = min_cost_path(empty_grid)
print(f"The minimum cost path is: {min_cost}") # Output: -1
```

This code efficiently calculates the minimum cost using dynamic programming. The time complexity is O(m*n) where 'm' and 'n' are the dimensions of the grid, making it suitable for reasonably sized grids.  Error handling is included to gracefully manage empty or invalid input grids.

